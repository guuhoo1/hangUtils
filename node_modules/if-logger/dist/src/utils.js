"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.getNodeColorMessage = exports.useFormat = exports.getColorMessage = exports.simpleFormat = exports.defaultFormat = exports.getHeaderString = exports.getTagString = exports.isNode = exports.trim = void 0;
var setting_1 = require("./setting");
function trim(obj) {
    var result = {};
    Object.entries(obj).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (value !== undefined) {
            result[key] = value;
        }
    });
    return result;
}
exports.trim = trim;
function isNode() {
    if (typeof process !== 'undefined' && process.versions && process.versions.node) {
        // @ts-ignore
        if (process.versions.electron) {
            return false;
        }
        return true;
    }
    return false;
}
exports.isNode = isNode;
function getTagString(str) {
    return '[' + (typeof str === 'function' ? str() : str) + ']';
}
exports.getTagString = getTagString;
function getHeaderString(strList) {
    return strList.map(getTagString).join('');
}
exports.getHeaderString = getHeaderString;
function defaultFormat(level, tags, message) {
    if (tags === void 0) { tags = []; }
    return getHeaderString(__spreadArrays([level], tags)) + ' ' + message;
}
exports.defaultFormat = defaultFormat;
function simpleFormat(level, tags, message) {
    var tagstr = tags.map(function (tag) { return (typeof tag === 'function' ? tag() : tag); }).join(' ');
    return level[0].toUpperCase() + " " + tagstr + " | " + message;
}
exports.simpleFormat = simpleFormat;
function getColorMessage(level, message) {
    var color = setting_1.LOG_LEVEL[level].color;
    if (isNode()) {
        return [setting_1.NODE_COLOR[color], message];
    }
    return ['%c' + message, 'color:' + color];
}
exports.getColorMessage = getColorMessage;
function useFormat(level, tags, format) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return getColorMessage(level, format(level, tags, args.join(' ')));
    };
}
exports.useFormat = useFormat;
function getNodeColorMessage(level, message) {
    if (typeof message === 'object') {
        return message;
    }
    return setting_1.NODE_COLOR[setting_1.LOG_LEVEL[level].color].replace('%s', message);
}
exports.getNodeColorMessage = getNodeColorMessage;
//# sourceMappingURL=utils.js.map